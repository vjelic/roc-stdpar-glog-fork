{
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "Glog.AI",
          "organization": "Glog.AI",
          "fullName": "Glog, Making software more secure",
          "version": "1.0.0",
          "semanticVersion": "1.0.0",
          "informationUri": "https://www.glog.ai",
          "rules": [
            {
              "id": "glog-99e01214-2d34-46eb-8943-730294b77381",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe `memcpy` function in C++ is used to copy a block of memory from one location to another. This function is vulnerable to buffer overflow attacks if the size of the data being copied is larger than the size of the destination buffer. In the provided code snippet, `memcpy(__hipstdpar_malloc(n), p, n)`, there is no check to ensure that the size of the data pointed to by `p` is not larger than the size of the memory allocated by `__hipstdpar_malloc(n)`. This can lead to a buffer overflow, which can cause the program to crash or behave unpredictably, and may allow an attacker to execute arbitrary code.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, you should always ensure that the size of the data being copied does not exceed the size of the destination buffer. This can be done by checking the size of the data before calling `memcpy`. Additionally, consider using functions that limit the amount of data copied to the size of the destination buffer, such as `strncpy` or `memcpy_s`.\n\n## Source Code Fix Recommendation\n\nHere is a recommended fix for the provided code snippet:\n\n```cpp\nsize_t size = sizeof(p);\nif (n <= size) {\n    memcpy(__hipstdpar_malloc(n), p, n);\n} else {\n    // Handle error\n}\n```\n\nIn this fix, the size of the data pointed to by `p` is checked before calling `memcpy`. If `n` is larger than the size of the data, an error is handled appropriately.\n\n## Library Dependencies\n\nThe provided code snippet requires the following library dependencies:\n\n- `<cstring>`: This library provides the `memcpy` function.\n- `<cstdlib>`: This library may be required for the `__hipstdpar_malloc` function, depending on its implementation.\n\n## OWASP Resources\n\n- [Buffer Overflow](https://owasp.org/www-community/vulnerabilities/Buffer_Overflow)\n\n## Common Weakness Enumeration (CWE)\n\n- [CWE-120: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')](https://cwe.mitre.org/data/definitions/120.html)\n\nPlease note that the links provided are valid and active for anonymous users at the time of writing."
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            }
          ],
          "language": "en-US",
          "contents": [
            "localizedData",
            "nonLocalizedData"
          ],
          "isComprehensive": false
        }
      },
      "language": "en-US",
      "results": [
        {
          "ruleId": "glog-99e01214-2d34-46eb-8943-730294b77381",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Detected Vulnerability in C Function (memcpy)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "include/hipstdpar_lib.hpp"
                },
                "region": {
                  "startLine": 169,
                  "startColumn": 26,
                  "endLine": 169,
                  "endColumn": 61,
                  "charOffset": 5531,
                  "charLength": 35,
                  "snippet": {
                    "text": "memcpy(__hipstdpar_malloc(n), p, n)",
                    "rendered": {
                      "text": "memcpy(__hipstdpar_malloc(n), p, n)",
                      "markdown": "`memcpy(__hipstdpar_malloc(n), p, n)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "include/hipstdpar_lib.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5531,
                        "charLength": 35
                      },
                      "insertedContent": {
                        "text": "memcpy_s(__hipstdpar_malloc(n), <size of __hipstdpar_malloc(n)>,  p,  n)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        }
      ],
      "newlineSequences": [
        "\r\n",
        "\n"
      ]
    }
  ]
}